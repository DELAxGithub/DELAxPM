name: Database Migration

on:
  push:
    branches: [main, master]
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/migrate.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  validate-migration:
    runs-on: ubuntu-latest
    name: Validate Migration Files
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate migration file syntax
        run: |
          echo "🔍 マイグレーションファイル構文チェック"
          
          # マイグレーションファイルの存在確認
          if [ ! -f "supabase/migrations/20250728000001_basic_schema.sql" ]; then
            echo "❌ Basic schema migration file not found"
            exit 1
          fi
          
          if [ ! -f "supabase/migrations/20250728000002_team_data_setup.sql" ]; then
            echo "❌ Team data migration file not found"
            exit 1
          fi
          
          echo "✅ Migration files exist"
          
          # SQLファイルの基本構文チェック
          echo "📊 Basic SQL syntax validation"
          grep -q "CREATE TABLE" supabase/migrations/20250728000001_basic_schema.sql && echo "✅ Schema creation detected"
          grep -q "INSERT INTO" supabase/migrations/20250728000002_team_data_setup.sql && echo "✅ Data insertion detected"
          grep -q "\[PLATTO\]" supabase/migrations/20250728000002_team_data_setup.sql && echo "✅ PLATTO team data detected"
          grep -q "\[LIBERARY\]" supabase/migrations/20250728000002_team_data_setup.sql && echo "✅ LIBERARY team data detected"
          
          echo "🎉 Migration validation completed successfully!"

  migrate-production:
    needs: validate-migration
    runs-on: ubuntu-latest
    name: Deploy to Production
    environment: production
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Link to Supabase project
        run: |
          cd supabase
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Run database migration
        run: |
          cd supabase
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Validate production migration
        run: |
          cd supabase
          # データ確認
          echo "Checking migration results in production environment..."
          supabase db execute "SELECT CASE WHEN notes ILIKE '%[PLATTO]%' THEN 'platto' WHEN notes ILIKE '%[LIBERARY]%' THEN 'liberary' ELSE 'other' END as team, COUNT(*) as count FROM programs GROUP BY CASE WHEN notes ILIKE '%[PLATTO]%' THEN 'platto' WHEN notes ILIKE '%[LIBERARY]%' THEN 'liberary' ELSE 'other' END ORDER BY team"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Notify Slack on Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#general'
          text: '🎉 DELA×PM 本番データベースマイグレーション完了！PLATTOチーム・LIBERARYチームデータが正常に投入されました。'
        env:
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
        if: success()
        
      - name: Notify Slack on Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#general'
          text: '❌ DELA×PM データベースマイグレーションが失敗しました。確認が必要です。'
        env:
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
        if: failure()

