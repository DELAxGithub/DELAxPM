name: 🚀 Deploy to Production
on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
    types: [ closed ]
  workflow_dispatch:

# Environment variables
env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'
  
jobs:
  # ===================================
  # BUILD & TEST JOB
  # ===================================
  build-and-test:
    name: 🔧 Build & Test
    runs-on: ubuntu-latest
    outputs:
      deploy-needed: ${{ steps.check-changes.outputs.deploy }}
    
    steps:
      # Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Setup Node.js
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Setup pnpm
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      # Cache dependencies
      - name: 📂 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/unified/node_modules
            apps/unified/.next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # Install dependencies
      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      # Type check
      - name: 🔍 TypeScript Type Check
        run: pnpm type-check

      # Lint check
      - name: 🧹 ESLint Check
        run: pnpm lint

      # Build application
      - name: 🏗️ Build Application
        run: pnpm build:unified
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: "DELA×PM統合システム"
          NEXT_PUBLIC_ENABLE_PLATTO: "true"
          NEXT_PUBLIC_ENABLE_LIBERARY: "true"
          NEXT_PUBLIC_ENABLE_GUEST_ACCESS: "true"

      # Install Playwright browsers
      - name: 🎭 Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      # Run E2E tests
      - name: 🧪 Run E2E Tests
        run: pnpm test:e2e
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          CI: true

      # Upload test results
      - name: 📊 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      # Check if deployment is needed
      - name: 🔍 Check Changes for Deployment
        id: check-changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      # Upload build artifacts
      - name: 📦 Upload Build Artifacts
        if: steps.check-changes.outputs.deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/unified/out/
            apps/unified/.next/
          retention-days: 1

  # ===================================
  # DATABASE MIGRATION JOB
  # ===================================
  database-migration:
    name: 🗄️ Database Migration
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.deploy-needed == 'true'
    
    steps:
      # Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Setup Supabase CLI
      - name: 🔧 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # Run database migrations
      - name: 🗄️ Run Database Migrations
        run: |
          cd supabase
          supabase db push --linked
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

      # Validate migration
      - name: ✅ Validate Migration
        run: |
          echo "🔍 Validating database migration..."
          # Basic connection test
          curl -f "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}/rest/v1/programs" \
            -H "apikey: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            --max-time 10 || exit 1
          echo "✅ Database validation successful"

  # ===================================
  # DEPLOY JOB
  # ===================================
  deploy:
    name: 🚀 Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [build-and-test, database-migration]
    if: needs.build-and-test.outputs.deploy-needed == 'true'
    environment: production
    
    steps:
      # Checkout code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Download build artifacts
      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: apps/unified/

      # Deploy to Netlify
      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './apps/unified/out'
          production-branch: master
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🚀 Deploy from GitHub Actions - ${{ github.sha }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Health check
      - name: 🏥 Health Check
        run: |
          echo "🔍 Performing health check..."
          sleep 30  # Wait for deployment to be available
          
          # Check if site is accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" https://delaxpm.netlify.app/)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed - Site is accessible"
          else
            echo "❌ Health check failed - HTTP $response"
            exit 1
          fi
          
          # Check API endpoints
          api_response=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}/rest/v1/programs" \
            -H "apikey: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}")
          if [ $api_response -eq 200 ]; then
            echo "✅ API check passed - Database is accessible"
          else
            echo "❌ API check failed - HTTP $api_response"
            exit 1
          fi

  # ===================================
  # NOTIFICATION JOB
  # ===================================
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, database-migration, deploy]
    if: always()
    
    steps:
      # Success notification
      - name: ✅ Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 Site: https://delaxpm.netlify.app/"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"
          
          # Future: Add Slack/email notification here
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"✅ DELAxPM deployment successful!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      # Failure notification  
      - name: ❌ Failure Notification
        if: needs.deploy.result == 'failure' || needs.build-and-test.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "🔗 Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Future: Add Slack/email notification here
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"❌ DELAxPM deployment failed!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===================================
  # CLEANUP JOB
  # ===================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, notify]
    if: always()
    
    steps:
      - name: 🧹 Cleanup Artifacts
        run: |
          echo "🧹 Cleaning up temporary artifacts..."
          # Artifacts are automatically cleaned up by GitHub Actions retention policy
          echo "✅ Cleanup completed"